#include <stdio.h>
#include <string.h>


typedef struct
{
    char nombre[15];
    float calificacion;
} Profesor;

int findMatch (Profesor * arr, int x);
void readArray (Profesor * arr, int x);
void mergeArrays (Profesor * arr1, int x, Profesor * arr2, int y, Profesor * arr3, int z);
void sortArray (Profesor *arr, int x);
void printArray (Profesor arr[], int x);


void main ()
{
    Profesor arr1[20];		//Primer arreglo
    Profesor arr2[20];		//Segundo arreglo
    Profesor arrF[40];		//Arreglo final, con elementos fusionados y ordenados
    int n1, n2, n3;		//Longitud de los arreglos
    printf("Cuantos profes hay en la primer lista?: ");
    scanf("%d", &n1);
    readArray (arr1, n1);		//leer el primer arreglo
    printf("Cuantos profes hay en la segunda lista?: ");
    scanf("%d", &n2);
    readArray (arr2, n2);		//leer el segundo arreglo 
    n3 = n1 + n2;
    mergeArrays (arr1, n1, arr2, n2, arrF, n3);	//Fusionar los dos arreglos en un tercer arreglo
    n3 = findMatch(arrF, n3);


    sortArray(arrF,n3);  //Ordenar los elementos del tercer arreglo, recuerde que pueden 
                    //existir profesores repetidos


    printArray (arrF, n3);
}

void readArray (Profesor * arr, int x)
{
  Profesor *p = arr;
  for (int c = 0; c < x; c++)
    {
      scanf ("%s", (*(p + c)).nombre);
      scanf ("%f", &(*(p + c)).calificacion);
      getchar ();
    }
}

void printArray (Profesor * arr, int x)
{
    Profesor *p = arr;
    int c;
    for (c = 0; c < x; c++)
    {
        printf ("%s, %.2f\n", (p + c)->nombre, (p + c)->calificacion);
    }

}

void
mergeArrays (Profesor *arr1, int x, Profesor *arr2, int y, Profesor *arr3, int z)
{
    Profesor *p = arr3;
    int i, c;
    int *ptr = z;
    for (i = 0; i < x; i++)
    {
        strcpy ((p + i)->nombre, (arr1 + i)->nombre);
        (p + i)->calificacion = (arr1 + i)->calificacion;
      //printf ("%s, %.2f\n", (p + i)->nombre, (p + i)->calificacion);
    }				//Se copian los valores de la primer lista a la lista final
    
    for (c = x; c < z; c++)
    {
        strcpy ((p + c)->nombre, (arr2 + c - i)->nombre);
        (p + c)->calificacion = (arr2 + c - i)->calificacion;
      //printf ("%s, %.2f\n", (p + c)->nombre, (p + c)->calificacion);
    }				//Se copian los valores de la segunda lista lista a la lista final

}

int findMatch(Profesor *arr  , int x)
{
    Profesor *p = arr;
    int i, c, pos, dvi;
    int *ptr;
    ptr = &x;
    float acc;
    for(i=0;i<x-1;i++)
    {
    acc=(p+i)->calificacion;
    dvi=1;
        for(c=i+1;c<x;c++)
        {
            if(strcmp((p+i)->nombre, (p+c)->nombre)==0) //Busca matches de nombres en la lista
                {
                    dvi++; //El Divisor aumenta en 1.
                    acc=(acc+(p+c)->calificacion); //Se suman las calificaciones en un acumulador
                    for(pos=c+1;pos<x;pos++) //Recorre un espacio a todos los elementos en la lista para eliminar al repetido.
                    {
                        strcpy((p+pos-1)->nombre,(p+pos)->nombre);
                        (p+pos-1)->calificacion=(p+pos)->calificacion; //Se copian los valores del Profesor siguiente en la lista a la posicion actual.
                    }
                    *ptr = *ptr - 1; // tamaÃ±o de ArrF disminuye
                }
        }
    (p+i)->calificacion = acc/dvi; //Se obtiene el promedio de la calificacion
    }
    

    return *ptr;
}

void sortArray (Profesor *arr, int x)
{
    Profesor *p = arr;
    Profesor bandera;
    int i, c;
    for(i=0;i<x-1;i++)
    {
        for(c=i+1;c<x;c++)
        {
            if((p+i)->calificacion<(p+c)->calificacion)
            {
                strcpy(bandera.nombre,(p+c)->nombre);
                strcpy((p+c)->nombre, (p+i)->nombre);
                strcpy((p+i)->nombre, bandera.nombre);
                bandera.calificacion = (p+c)->calificacion;
                (p+c)->calificacion = (p+i)->calificacion;
                (p+i)->calificacion = bandera.calificacion;
            }
        }
    }
}
