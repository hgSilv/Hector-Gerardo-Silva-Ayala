#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <time.h>


typedef unsigned long long int ulli;

typedef struct
{
    ulli inicio;
    ulli fin;
    float sumaParcial;
}Range; //estructura de parametros para el hilo


DWORD WINAPI suma(void * param);

int main(void)
{

    int ms;
    int hilos;
    int i;
    float pi ;
    printf("Hilos? \t ");
    scanf("%d", &hilos);
    clock_t start = clock();
    Range * range =(Range*)malloc(hilos * sizeof(Range));
    ulli lim = 50000000000 / hilos;
    for(i=0; i<hilos; i++)
    {
        range[i].inicio=(lim*i)+1;
        range[i].fin=lim*(i+1);
        range[i].sumaParcial=0;
    }//Asigna los parametros que enviaremos a los hilos
    //Cada hilo empieza en diferentes posiciones gracias al ciclo, de esa forma
    //aseguro que los hilos trabajen en diferentes partes de la serie

    HANDLE *p=(HANDLE*)calloc(hilos, sizeof(HANDLE));

    for(i=0; i<hilos; i++)
        p[i]= CreateThread(NULL, 0, suma, (void *)&range[i], 0, NULL);
    //
    WaitForMultipleObjects(hilos, p, TRUE, INFINITE);
    for(i=0; i<lim; i++)
        pi = pi+range[i].sumaParcial;
    pi = pi*4;
    clock_t stop = clock();
    ms = 1000*(stop-start)/CLOCKS_PER_SEC;
    printf("\n Pi:\t %.10f\n", pi);
    printf("Tiempo\t = %d ms", ms);
    free(range);
    free(p);

    return EXIT_SUCCESS;

}

DWORD WINAPI suma(void *param)
{
    Range *r= (Range*)param;
    unsigned long long int i;
    for(i=r->inicio;i<=r->fin;i++)
        if(i&1)
            r->sumaParcial -= 1.0/(2*i+1);
        else
            r->sumaParcial += 1.0/(2*i+1);
    return NULL;
}
